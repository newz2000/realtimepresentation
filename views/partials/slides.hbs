<section>
    <h1>Beyond REST</h1>
    <h3>Real time apps with Node.js and WebSockets</h3>
    <p>
        <small>Matthew Nuzum <a href="https://twitter.com/newz2000">@newz2000</a></small>
    </p>
</section>

<section>
    <h2>See websockets now</h2>
    <p>You can follow along and even participate by viewing this site on your computer, tablet or mobile device at</p>
        <h3><a href="https://tekrs.com/real-time">https://realtime.tekrs.com/</a></h3>
</section>

<section>
    <h1>What is “Real Time”?</h1>
</section>

<section data-background="/images/ubuntu.png">
    <pre><code>REAL TIME: The Old Way.</code></pre>
    <pre><code>THIS is the problem we want to solve.</code></pre>
</section>

<section data-background="/images/cobalt.png">
    <pre><code>Who remembers this?</code></pre>
</section>

<section>
    <h2>A new way</h2><h3>(starting with IE5)</h3>
    <p><img src="/images/ms-ajax.png" width="448"></p>
</section>

<section>
    <h2>Then came:</h2>
    <ul>
        <li>Commetd</li>
        <li>Long polling</li>
        <li>Frame hacks</li>
        <li>Flash trickery</li>
    </ul>
    <h3>These simply paved the way for</h3>
</section>

<section>
    <h1>Websockets</h1>
    <p>Welcome to the real time web.</p>
</section>

<section>
    <h2>Implementations:</h2>
    <ul>
        <li><strong>Servers</strong></li>
        <li>.Net (SignalR)</li>
        <li>Java (Java EE7)</li>
        <li>Python (Autobahn)</li>
        <li>Node.js</li>
        <li><strong>Clients</strong></li>
        <li>Android (Autobahn)</li>
        <li>iOS (SocketRocket)</li>
        <li>Javascript</li>
    </ul>
</section>

<section>
    <h2>Can I use it?</h2>
    <p><img src="/images/caniuse.png" alt=""/></p>
</section>

<section>
    <h1>Yes, with Socket.io</h1>
    <p>A real-time engine that uses websockets when possible.</p>
</section>

<section>
    <h2>Compatibility</h2>
    <p><img src="/images/socket-io-compatibility.png"></p>
</section>

<section>
    <h1>What can we do with it?</h1>
    <p><strong>Our goal:</strong> eliminate polling</p>
</section>

<section>
    <h2>Chat</h2>
    <p>Everyone's first app</p>
</section>

<section>
    <h2>Update product availability in real time</h2>
    <p>Think of Woot - watch the available count drop.</p>
</section>

<section>
    <h2>Stock or commodities pricing</h2>
    <p>See changes in milliseconds</p>
    <p>Note: Some prices don't change at all during a day. Some change by the second. Why update them all?</p>
</section>

<section>
    <h1>Putting Socket.io to work</h1>
    <p>Turns out, it's not hard</p>
</section>

<section>
    <h2>Everything is an event</h2>
    <p>Client side:</p>
    <pre><code>
var sendQuestion = function(e) {
    $question = $('#questionfield');
    socket.emit('question', $question.val());
}

socket.on('questions', function(questions) {
    $('#quetion_count').text(questions.length);
    showQuestions(questions);
});
    </code></pre>
</section>

<section>
    <h2>Everything is an event</h2>
    <p>Server side:</p>
    <pre><code>
    socket.on('question', function(data) {
        addQuestion(data);
        io.emit('questions', questions);
    });
    </code></pre>
</section>

<section>
    <h1>It is very easy</h1>
    <p>I built the app running this presentation in about 3 hours.</p>
</section>

<section>
    <h2>How does Socket.io work?</h2>
    <ol>
        <li>Makes an HTTP request (via Ajax) to negotiate the best way to communicate</li>
        <li>Establishes a connection</li>
        <li>Begins two-way communication</li>
        <li>Tries to reconnect if the connection breaks</li>
    </ol>
</section>

<section>
    <h2>How does Socket.io work?</h2>
    <ol>
        <li>Server can broadcast to all connections</li>
        <li>Server can message individual connections</li>
        <li>Can make use of sessions on the server side</li>
    </ol>
</section>

<section>
    <h2>Using Socket.io and Express.js</h2>
    <pre><code>
var express = require('express');
var http = require('http');
var socketio = require('socket.io');

var app = express();
var server = http.Server(app);
var io = socketio(server);

server.listen(5000);
</code></pre>
</section>

<section>
    <h2>Using Socket.io and Express.js</h2>
    <pre><code>
var connection_count = 0;

io.on('connection', function(socket) {
    connection_count++;

    io.emit('connections', connection_count);

    socket.on('disconnect', function() {
        connection_count--;
        io.emit('connections', connection_count);
    });
});
    </code></pre>
</section>

<section>
    <h2>REST. What is it good for?</h2>
    <ul>
        <li>The best way to leverage HTTP</li>
        <li>Stateless, therefore great for APIs</li>
        <li>Simpler than SOAP, CORBA, .*COM</li>
        <li>¿CRUD style web apps?</li>
    </ul>
</section>

<section>
    <h2>Modern web apps</h2>
    <ol>
        <li>Server figures out who you are and what you're allowed to see or do</li>
        <li>Fetch information and display it</li>
        <li>Browser shows information in an edit form</li>
        <li>Submit form back to the server</li>
        <li>Server figures out who you are and what you're allowed to see or do</li>
        <li>Consider response</li>
        <li>Take action (i.e. redirect, show error)</li>
    </ol>
</section>

<section>
    <h1>When is statelessness a benefit?</h1>
</section>

<section>
    <h1>Scaling Node.js and WebSockets</h1>
</section>

<section>
    <h2>A real problem</h2>
    <p>This isn't busy:</p>
    <p><img src="/images/not-busy.png" alt=""/></p>
</section>

<section>
    <h2>A real problem</h2>
    <p>This is busy!</p>
    <p><img src="/images/busy.png" alt=""/></p>
</section>

<section>
    <h2>Node.js isn't multi-threaded*</h2>
    <p>*Note exactly true</p>
</section>

<section>
    <h2>We run multiple Node.js processes</h2>
    <p><img src="/images/workers.png" alt=""/></p>
</section>

<section>
    <h2>Now we have a new problem!</h2>
    <p><img src="/images/scattered-sockets.png" alt=""/></p>
</section>

<section>
    <h2>Possible solutions:</h2>
    <ul>
        <li>Poll the database</li>
        <li>Pool all sockets to one server</li>
        <li>Use a message queue</li>
    </ul>
</section>

<section>
    <h2>Redis pub/sub</h2>
    <ul>
        <li>Redis is a key/value data store</li>
        <li>You may already be using it for your sessions</li>
        <li>Similar to memcached</li>
        <li>But it now has pub/sub support!</li>
        <li>It works a lot like websockets</li>
    </ul>
</section>

<section>
    <h2>Here's how to use it</h2>
    <pre><code>
var client = redis.createClient();
var client2 = redis.createClient();

client.publish('instances', 'start');
client2.on('message', function (channel, message) {
    doStuff();
});

client2.subscribe('instances');
client2.subscribe('chat');
    </code></pre>
</section>

<section>
    <h1>Questions?</h1>
</section>

<section style="text-align: left;">
    <h1>Thank You</h1>
    <ul>
        <li><a href="https://twitter.com/newz2000">@newz2000</a></li>
        <li><a href="https://github.com/newz2000">Code on GitHub</a></li>
        <li><a href="https://www.tekrs.com/">TEKRS</a>, affordable tech training</li>
    </ul>
    <!-- Begin MailChimp Signup Form -->
    <div id="mc_embed_signup">
        <form action="//tekrs.us9.list-manage.com/subscribe/post?u=72749da458b6f00a862c1b90c&amp;id=6c534e201a" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
            <div id="mc_embed_signup_scroll">
                <p>Subscribe to the low-volume mailing list for training discounts and opportunities:<br />
                    <div class="mc-field-group">
                        <input type="email" value="" name="EMAIL" class="required email" style="font-size:larger" id="mce-EMAIL" placeholder="email"> <input type="submit" value="Subscribe"  style="font-size:larger" name="subscribe" id="mc-embedded-subscribe" class="button">
                    </div>
                    <div id="mce-responses" class="clear">
                        <div class="response" id="mce-error-response" style="display:none"></div>
                        <div class="response" id="mce-success-response" style="display:none"></div>
                    </div>    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
                    <div style="position: absolute; left: -5000px;"><input type="text" name="b_72749da458b6f00a862c1b90c_6c534e201a" tabindex="-1" value=""></div>
                    <div class="clear"></div>
                </p>
            </div>
        </form>
    </div>

    <!--End mc_embed_signup-->
</section>
